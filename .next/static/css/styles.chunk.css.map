{"version":3,"file":"static/css/styles.chunk.css","sources":["webpack:///./styles/styles/main.scss","webpack:///./styles/node_modules/breakpoint-sass/stylesheets/_breakpoint.scss"],"sourcesContent":["@import \"breakpoint-sass\";\n$mainText: #FFF3A7;\n$mainBK: #343434;\n$main: #332875;\n$main2: #75006c;\n$inputBG: #D7AE3E;\n.superAwesome {\n  @include breakpoint(max-width 768px) {\n    background-color: $main2;\n  }\n  background-color: $main;\n  color: white;\n  margin-bottom: unset;\n  padding: 5px;\n  background-image: linear-gradient(180deg, #FDF8A2 3%, #F4D97A 47%, #EEC462 100%);\n}\n\n.input {\n  &::placeholder {\n    color: white;\n    opacity: 1; /* Firefox */\n  }\n\n  &:focus {\n    color: #ffffff;\n    background-color: darken($inputBG, 15%);\n    //border-color: #ff7f19;\n    outline: 0;\n    outline-offset: -2px;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, .25);\n  }\n\n  display: block;\n  height: calc(1.5em + .75rem + 2px);\n  padding: .375rem .75rem;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #000000;\n  background-color: $inputBG;\n  background-clip: padding-box;\n  border: unset;\n  border-radius: .25rem;\n  transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;\n}\n\n.flexContainer {\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n}\n\n.menu {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  background-color: #D8D8D8;\n  width: 164px;\n  height: 238px;\n  position: absolute;\n  padding: 25px;\n  border-radius: 3px;\n  z-index: 100;\n\n  a {\n    &:hover {\n      color: #75006c;\n    }\n    &:link {\n      text-decoration: none;\n    }\n\n    color: $mainBK;\n  }\n}\n\n.marquee {\n  &_flexContainer {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    max-width: 1100px;\n    overflow: hidden;\n    @include breakpoint(max-width 500px){\n      max-width: 500px;\n    }\n  }\n\n  max-height: 25px;\n  display: flex;\n  align-items: center;\n  background-color: black;\n  text-align: center;\n  justify-content: center;\n  &_text {\n    margin: 0;\n    font-size: 1rem;\n    white-space: nowrap;\n    color: $mainText;\n  }\n  svg {\n    margin-right: 10px;\n    text-align: right;\n    color: $mainText;\n  }\n}","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n"],"mappings":"AAMA;AAIA;AACA;AACA;AACA;AACA;ACkDA;AD1DA;AAEA;AACA;AAQA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAEA;AACA;AAAA;AAHA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAoBA;AApBA;AAcA;AAdA;AAiBA;AACA;AAMA;AAYA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AACA;AACA;AACA;AACA;AClBA;ADaA;AAOA;AAUA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AACA;AACA;;","sourceRoot":""}